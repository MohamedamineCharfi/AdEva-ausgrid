{"ast":null,"code":"// src/services/predictHelper.js\nimport { predictConsumption } from \"./api\";\nexport const handlePredictionLogic = async ({\n  records,\n  consumerId,\n  setNotification,\n  setPredictionData\n}) => {\n  if (!consumerId) {\n    return setNotification(\"You must select a consumer before predicting.\");\n  }\n  const targetMonth = \"2013-06\";\n  const [year, month] = targetMonth.split(\"-\").map(Number);\n  const juneData = records.filter(r => {\n    const d = new Date(r.date);\n    return Number(r.Customer) === Number(consumerId) && d.getFullYear() === year && d.getMonth() + 1 === month;\n  }).sort((a, b) => new Date(a.date) - new Date(b.date));\n  if (juneData.length < 30) {\n    return setNotification(\"Not enough data (need at least 30 days in June).\");\n  }\n\n  // Extract the last 30 records and format to [consumption, holiday, saison]\n  const inputSequence = juneData.slice(-30).map(r => [parseFloat(r.consumption_daily_normalized), parseFloat(r.is_holiday_or_weekend), parseFloat(r.saison)]);\n  try {\n    console.log(\"Sending input sequence to backend:\", inputSequence);\n    const prediction = await predictConsumption({\n      inputSequence\n    });\n    setPredictionData(prediction);\n    setNotification(null);\n  } catch (err) {\n    console.error(err);\n    setNotification(\"Prediction failed.\");\n  }\n};","map":{"version":3,"names":["predictConsumption","handlePredictionLogic","records","consumerId","setNotification","setPredictionData","targetMonth","year","month","split","map","Number","juneData","filter","r","d","Date","date","Customer","getFullYear","getMonth","sort","a","b","length","inputSequence","slice","parseFloat","consumption_daily_normalized","is_holiday_or_weekend","saison","console","log","prediction","err","error"],"sources":["C:/Users/User/OneDrive/Documents/GitHub/AdEva-ausgrid/app/frontend/src/services/predictHelper.js"],"sourcesContent":["// src/services/predictHelper.js\r\nimport { predictConsumption } from \"./api\";\r\n\r\nexport const handlePredictionLogic = async ({\r\n  records,\r\n  consumerId,\r\n  setNotification,\r\n  setPredictionData,\r\n}) => {\r\n  if (!consumerId) {\r\n    return setNotification(\"You must select a consumer before predicting.\");\r\n  }\r\n\r\n  const targetMonth = \"2013-06\";\r\n  const [year, month] = targetMonth.split(\"-\").map(Number);\r\n\r\n  const juneData = records\r\n    .filter((r) => {\r\n      const d = new Date(r.date);\r\n      return (\r\n        Number(r.Customer) === Number(consumerId) &&\r\n        d.getFullYear() === year &&\r\n        d.getMonth() + 1 === month\r\n      );\r\n    })\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n  if (juneData.length < 30) {\r\n    return setNotification(\"Not enough data (need at least 30 days in June).\");\r\n  }\r\n\r\n  // Extract the last 30 records and format to [consumption, holiday, saison]\r\n  const inputSequence = juneData\r\n    .slice(-30)\r\n    .map((r) => [\r\n      parseFloat(r.consumption_daily_normalized),\r\n      parseFloat(r.is_holiday_or_weekend),\r\n      parseFloat(r.saison),\r\n    ]);\r\n\r\n  try {\r\n    console.log(\"Sending input sequence to backend:\", inputSequence);\r\n    const prediction = await predictConsumption({ inputSequence });\r\n    setPredictionData(prediction);\r\n    setNotification(null);\r\n  } catch (err) {\r\n    console.error(err);\r\n    setNotification(\"Prediction failed.\");\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,SAASA,kBAAkB,QAAQ,OAAO;AAE1C,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAO;EAC1CC,OAAO;EACPC,UAAU;EACVC,eAAe;EACfC;AACF,CAAC,KAAK;EACJ,IAAI,CAACF,UAAU,EAAE;IACf,OAAOC,eAAe,CAAC,+CAA+C,CAAC;EACzE;EAEA,MAAME,WAAW,GAAG,SAAS;EAC7B,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAGF,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EAExD,MAAMC,QAAQ,GAAGV,OAAO,CACrBW,MAAM,CAAEC,CAAC,IAAK;IACb,MAAMC,CAAC,GAAG,IAAIC,IAAI,CAACF,CAAC,CAACG,IAAI,CAAC;IAC1B,OACEN,MAAM,CAACG,CAAC,CAACI,QAAQ,CAAC,KAAKP,MAAM,CAACR,UAAU,CAAC,IACzCY,CAAC,CAACI,WAAW,CAAC,CAAC,KAAKZ,IAAI,IACxBQ,CAAC,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAKZ,KAAK;EAE9B,CAAC,CAAC,CACDa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIP,IAAI,CAACM,CAAC,CAACL,IAAI,CAAC,GAAG,IAAID,IAAI,CAACO,CAAC,CAACN,IAAI,CAAC,CAAC;EAEtD,IAAIL,QAAQ,CAACY,MAAM,GAAG,EAAE,EAAE;IACxB,OAAOpB,eAAe,CAAC,kDAAkD,CAAC;EAC5E;;EAEA;EACA,MAAMqB,aAAa,GAAGb,QAAQ,CAC3Bc,KAAK,CAAC,CAAC,EAAE,CAAC,CACVhB,GAAG,CAAEI,CAAC,IAAK,CACVa,UAAU,CAACb,CAAC,CAACc,4BAA4B,CAAC,EAC1CD,UAAU,CAACb,CAAC,CAACe,qBAAqB,CAAC,EACnCF,UAAU,CAACb,CAAC,CAACgB,MAAM,CAAC,CACrB,CAAC;EAEJ,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEP,aAAa,CAAC;IAChE,MAAMQ,UAAU,GAAG,MAAMjC,kBAAkB,CAAC;MAAEyB;IAAc,CAAC,CAAC;IAC9DpB,iBAAiB,CAAC4B,UAAU,CAAC;IAC7B7B,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC,CAAC,OAAO8B,GAAG,EAAE;IACZH,OAAO,CAACI,KAAK,CAACD,GAAG,CAAC;IAClB9B,eAAe,CAAC,oBAAoB,CAAC;EACvC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}