{"ast":null,"code":"// src/services/predictHelper.js\nimport { predictConsumption } from \"./api\";\nexport const handlePredictionLogic = async ({\n  records,\n  consumerId,\n  setNotification,\n  setPredictionData\n}) => {\n  if (!consumerId) {\n    return setNotification(\"You must select a consumer before predicting.\");\n  }\n\n  // get June of the last year in your dataset:\n  const targetMonth = \"2013-06\";\n  const [year, month] = targetMonth.split(\"-\").map(Number);\n  const juneData = records.filter(r => {\n    const d = new Date(r.date);\n    return Number(r.Customer) === Number(consumerId) && d.getFullYear() === year && d.getMonth() + 1 === month;\n  });\n  if (!juneData.length) {\n    return setNotification(`No data available for ${targetMonth} to predict.`);\n  }\n  try {\n    const prediction = await predictConsumption({\n      consumerId,\n      month: targetMonth\n    });\n    setPredictionData(prediction);\n    setNotification(null);\n  } catch (err) {\n    setNotification(err.message);\n  }\n};","map":{"version":3,"names":["predictConsumption","handlePredictionLogic","records","consumerId","setNotification","setPredictionData","targetMonth","year","month","split","map","Number","juneData","filter","r","d","Date","date","Customer","getFullYear","getMonth","length","prediction","err","message"],"sources":["C:/Users/User/OneDrive/Documents/GitHub/AdEva-ausgrid/app/frontend/src/services/predictHelper.js"],"sourcesContent":["// src/services/predictHelper.js\r\nimport { predictConsumption } from \"./api\";\r\n\r\nexport const handlePredictionLogic = async ({\r\n  records,\r\n  consumerId,\r\n  setNotification,\r\n  setPredictionData,\r\n}) => {\r\n  if (!consumerId) {\r\n    return setNotification(\"You must select a consumer before predicting.\");\r\n  }\r\n\r\n  // get June of the last year in your dataset:\r\n  const targetMonth = \"2013-06\";  \r\n  const [year, month] = targetMonth.split(\"-\").map(Number);\r\n\r\n  const juneData = records.filter((r) => {\r\n    const d = new Date(r.date);\r\n    return (\r\n      Number(r.Customer) === Number(consumerId) &&\r\n      d.getFullYear() === year &&\r\n      d.getMonth() + 1 === month\r\n    );\r\n  });\r\n\r\n  if (!juneData.length) {\r\n    return setNotification(`No data available for ${targetMonth} to predict.`);\r\n  }\r\n\r\n  try {\r\n    const prediction = await predictConsumption({ consumerId, month: targetMonth });\r\n    setPredictionData(prediction);\r\n    setNotification(null);\r\n  } catch (err) {\r\n    setNotification(err.message);\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,SAASA,kBAAkB,QAAQ,OAAO;AAE1C,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAO;EAC1CC,OAAO;EACPC,UAAU;EACVC,eAAe;EACfC;AACF,CAAC,KAAK;EACJ,IAAI,CAACF,UAAU,EAAE;IACf,OAAOC,eAAe,CAAC,+CAA+C,CAAC;EACzE;;EAEA;EACA,MAAME,WAAW,GAAG,SAAS;EAC7B,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC,GAAGF,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EAExD,MAAMC,QAAQ,GAAGV,OAAO,CAACW,MAAM,CAAEC,CAAC,IAAK;IACrC,MAAMC,CAAC,GAAG,IAAIC,IAAI,CAACF,CAAC,CAACG,IAAI,CAAC;IAC1B,OACEN,MAAM,CAACG,CAAC,CAACI,QAAQ,CAAC,KAAKP,MAAM,CAACR,UAAU,CAAC,IACzCY,CAAC,CAACI,WAAW,CAAC,CAAC,KAAKZ,IAAI,IACxBQ,CAAC,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAKZ,KAAK;EAE9B,CAAC,CAAC;EAEF,IAAI,CAACI,QAAQ,CAACS,MAAM,EAAE;IACpB,OAAOjB,eAAe,CAAC,yBAAyBE,WAAW,cAAc,CAAC;EAC5E;EAEA,IAAI;IACF,MAAMgB,UAAU,GAAG,MAAMtB,kBAAkB,CAAC;MAAEG,UAAU;MAAEK,KAAK,EAAEF;IAAY,CAAC,CAAC;IAC/ED,iBAAiB,CAACiB,UAAU,CAAC;IAC7BlB,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC,CAAC,OAAOmB,GAAG,EAAE;IACZnB,eAAe,CAACmB,GAAG,CAACC,OAAO,CAAC;EAC9B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}