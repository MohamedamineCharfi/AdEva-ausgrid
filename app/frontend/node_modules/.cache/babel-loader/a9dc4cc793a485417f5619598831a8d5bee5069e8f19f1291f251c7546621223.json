{"ast":null,"code":"import { predictConsumption } from \"./api\";\nexport const handlePredictionLogic = async ({\n  records,\n  consumerId,\n  setNotification,\n  setPredictionData\n}) => {\n  // Fixed range: June 1, 2013 to June 30, 2013\n  const startDate = new Date(\"2013-06-01\");\n  const endDate = new Date(\"2013-06-30\");\n  console.log(\"All records:\", records);\n  console.log(\"Consumer ID:\", consumerId);\n  const june2013Data = records.filter(record => {\n    const recordDate = new Date(record.date);\n    const match = record.ConsumerId === consumerId && recordDate >= startDate && recordDate <= endDate;\n    if (match) {\n      console.log(\"Matched record:\", record);\n    }\n    return match;\n  });\n  console.log(\"Filtered June 2013 Records:\", june2013Data.length);\n  if (june2013Data.length === 0) {\n    setNotification(\"No data available for June 2013 to predict.\");\n    return;\n  }\n  try {\n    const prediction = await predictConsumption(june2013Data);\n    setPredictionData(prediction);\n    setNotification(null);\n  } catch (error) {\n    setNotification(error.message);\n  }\n};","map":{"version":3,"names":["predictConsumption","handlePredictionLogic","records","consumerId","setNotification","setPredictionData","startDate","Date","endDate","console","log","june2013Data","filter","record","recordDate","date","match","ConsumerId","length","prediction","error","message"],"sources":["C:/Users/User/OneDrive/Documents/GitHub/AdEva-ausgrid/app/frontend/src/services/predictHelper.js"],"sourcesContent":["import { predictConsumption } from \"./api\";\r\n\r\nexport const handlePredictionLogic = async ({\r\n  records,\r\n  consumerId,\r\n  setNotification,\r\n  setPredictionData,\r\n}) => {\r\n  // Fixed range: June 1, 2013 to June 30, 2013\r\n  const startDate = new Date(\"2013-06-01\");\r\n  const endDate = new Date(\"2013-06-30\");\r\n\r\n  console.log(\"All records:\", records);\r\nconsole.log(\"Consumer ID:\", consumerId);\r\n\r\nconst june2013Data = records.filter((record) => {\r\n  const recordDate = new Date(record.date);\r\n  const match =\r\n    record.ConsumerId === consumerId &&\r\n    recordDate >= startDate &&\r\n    recordDate <= endDate;\r\n\r\n  if (match) {\r\n    console.log(\"Matched record:\", record);\r\n  }\r\n\r\n  return match;\r\n});\r\n\r\nconsole.log(\"Filtered June 2013 Records:\", june2013Data.length);\r\n\r\n  if (june2013Data.length === 0) {\r\n    setNotification(\"No data available for June 2013 to predict.\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const prediction = await predictConsumption(june2013Data);\r\n    setPredictionData(prediction);\r\n    setNotification(null);\r\n  } catch (error) {\r\n    setNotification(error.message);\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,OAAO;AAE1C,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAO;EAC1CC,OAAO;EACPC,UAAU;EACVC,eAAe;EACfC;AACF,CAAC,KAAK;EACJ;EACA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,YAAY,CAAC;EACxC,MAAMC,OAAO,GAAG,IAAID,IAAI,CAAC,YAAY,CAAC;EAEtCE,OAAO,CAACC,GAAG,CAAC,cAAc,EAAER,OAAO,CAAC;EACtCO,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEP,UAAU,CAAC;EAEvC,MAAMQ,YAAY,GAAGT,OAAO,CAACU,MAAM,CAAEC,MAAM,IAAK;IAC9C,MAAMC,UAAU,GAAG,IAAIP,IAAI,CAACM,MAAM,CAACE,IAAI,CAAC;IACxC,MAAMC,KAAK,GACTH,MAAM,CAACI,UAAU,KAAKd,UAAU,IAChCW,UAAU,IAAIR,SAAS,IACvBQ,UAAU,IAAIN,OAAO;IAEvB,IAAIQ,KAAK,EAAE;MACTP,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEG,MAAM,CAAC;IACxC;IAEA,OAAOG,KAAK;EACd,CAAC,CAAC;EAEFP,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEC,YAAY,CAACO,MAAM,CAAC;EAE7D,IAAIP,YAAY,CAACO,MAAM,KAAK,CAAC,EAAE;IAC7Bd,eAAe,CAAC,6CAA6C,CAAC;IAC9D;EACF;EAEA,IAAI;IACF,MAAMe,UAAU,GAAG,MAAMnB,kBAAkB,CAACW,YAAY,CAAC;IACzDN,iBAAiB,CAACc,UAAU,CAAC;IAC7Bf,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdhB,eAAe,CAACgB,KAAK,CAACC,OAAO,CAAC;EAChC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}