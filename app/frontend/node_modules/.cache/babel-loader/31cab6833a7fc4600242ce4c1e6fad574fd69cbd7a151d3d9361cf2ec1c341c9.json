{"ast":null,"code":"import { predictConsumption } from \"./api\";\nexport const handlePredictionLogic = async ({\n  records,\n  consumerId,\n  setNotification,\n  setPredictionData\n}) => {\n  // Fixed range: June 1, 2013 to June 30, 2013\n  const startDate = new Date(\"2013-06-01\");\n  const endDate = new Date(\"2013-06-30\");\n  const june2013Data = records.filter(record => {\n    const recordDate = new Date(record.date);\n    return record.ConsumerId === consumerId && recordDate >= startDate && recordDate <= endDate;\n  });\n  if (june2013Data.length === 0) {\n    setNotification(\"No data available for June 2013 to predict.\");\n    return;\n  }\n  try {\n    const prediction = await predictConsumption(june2013Data);\n    setPredictionData(prediction);\n    setNotification(null);\n  } catch (error) {\n    setNotification(error.message);\n  }\n};","map":{"version":3,"names":["predictConsumption","handlePredictionLogic","records","consumerId","setNotification","setPredictionData","startDate","Date","endDate","june2013Data","filter","record","recordDate","date","ConsumerId","length","prediction","error","message"],"sources":["C:/Users/User/OneDrive/Documents/GitHub/AdEva-ausgrid/app/frontend/src/services/predictHelper.js"],"sourcesContent":["import { predictConsumption } from \"./api\";\r\n\r\nexport const handlePredictionLogic = async ({\r\n  records,\r\n  consumerId,\r\n  setNotification,\r\n  setPredictionData,\r\n}) => {\r\n  // Fixed range: June 1, 2013 to June 30, 2013\r\n  const startDate = new Date(\"2013-06-01\");\r\n  const endDate = new Date(\"2013-06-30\");\r\n\r\n  const june2013Data = records.filter((record) => {\r\n    const recordDate = new Date(record.date);\r\n    return (\r\n      record.ConsumerId === consumerId &&\r\n      recordDate >= startDate &&\r\n      recordDate <= endDate\r\n    );\r\n  });\r\n\r\n  if (june2013Data.length === 0) {\r\n    setNotification(\"No data available for June 2013 to predict.\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const prediction = await predictConsumption(june2013Data);\r\n    setPredictionData(prediction);\r\n    setNotification(null);\r\n  } catch (error) {\r\n    setNotification(error.message);\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,OAAO;AAE1C,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAO;EAC1CC,OAAO;EACPC,UAAU;EACVC,eAAe;EACfC;AACF,CAAC,KAAK;EACJ;EACA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,YAAY,CAAC;EACxC,MAAMC,OAAO,GAAG,IAAID,IAAI,CAAC,YAAY,CAAC;EAEtC,MAAME,YAAY,GAAGP,OAAO,CAACQ,MAAM,CAAEC,MAAM,IAAK;IAC9C,MAAMC,UAAU,GAAG,IAAIL,IAAI,CAACI,MAAM,CAACE,IAAI,CAAC;IACxC,OACEF,MAAM,CAACG,UAAU,KAAKX,UAAU,IAChCS,UAAU,IAAIN,SAAS,IACvBM,UAAU,IAAIJ,OAAO;EAEzB,CAAC,CAAC;EAEF,IAAIC,YAAY,CAACM,MAAM,KAAK,CAAC,EAAE;IAC7BX,eAAe,CAAC,6CAA6C,CAAC;IAC9D;EACF;EAEA,IAAI;IACF,MAAMY,UAAU,GAAG,MAAMhB,kBAAkB,CAACS,YAAY,CAAC;IACzDJ,iBAAiB,CAACW,UAAU,CAAC;IAC7BZ,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdb,eAAe,CAACa,KAAK,CAACC,OAAO,CAAC;EAChC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}