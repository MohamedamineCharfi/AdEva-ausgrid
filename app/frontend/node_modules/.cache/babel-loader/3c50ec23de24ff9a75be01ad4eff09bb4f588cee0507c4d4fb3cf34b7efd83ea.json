{"ast":null,"code":"import axios from \"axios\";\nexport const API = axios.create({\n  baseURL: \"http://localhost:8000/api\"\n});\nAPI.interceptors.request.use(async config => {\n  let token = localStorage.getItem(\"access_token\");\n\n  // If expired, try refreshing it\n  if (token) {\n    const {\n      exp\n    } = JSON.parse(atob(token.split(\".\")[1]));\n    if (exp * 1000 < Date.now()) {\n      try {\n        const res = await axios.post(\"/api/token/refresh/\", {\n          refresh: localStorage.getItem(\"refresh_token\")\n        });\n        localStorage.setItem(\"access_token\", res.data.access);\n        token = res.data.access;\n      } catch (err) {\n        console.error(\"Refresh token failed\", err);\n        localStorage.clear();\n        window.location.href = \"/login\"; // Redirect to login\n      }\n    }\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n// Fetch all consumers\nexport const fetchConsumers = () => API.get(\"/consumers/\", {\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`\n  }\n}).then(res => res.data);\n\n// Fetch records (optionally filtered)  \nexport const fetchRecords = ({\n  consumerId,\n  postcode,\n  startDate,\n  endDate\n} = {}) => {\n  const params = {};\n  if (consumerId && consumerId !== \"\" && consumerId !== \"all\") params.Customer = consumerId;\n  if (postcode && postcode !== \"\" && postcode !== \"all\") params.Postcode = postcode;\n  if (startDate) params.start_date = startDate;\n  if (endDate) params.end_date = endDate;\n  return API.get(\"/records/\", {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`\n    },\n    params\n  }).then(res => res.data);\n};","map":{"version":3,"names":["axios","API","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","exp","JSON","parse","atob","split","Date","now","res","post","refresh","setItem","data","access","err","console","error","clear","window","location","href","headers","Authorization","fetchConsumers","get","then","fetchRecords","consumerId","postcode","startDate","endDate","params","Customer","Postcode","start_date","end_date"],"sources":["C:/Users/User/OneDrive/Documents/GitHub/AdEva-ausgrid/app/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const API = axios.create({\r\n  baseURL: \"http://localhost:8000/api\",\r\n});\r\n\r\nAPI.interceptors.request.use(async (config) => {\r\n  let token = localStorage.getItem(\"access_token\");\r\n\r\n  // If expired, try refreshing it\r\n  if (token) {\r\n    const { exp } = JSON.parse(atob(token.split(\".\")[1]));\r\n    if (exp * 1000 < Date.now()) {\r\n      try {\r\n        const res = await axios.post(\"/api/token/refresh/\", {\r\n          refresh: localStorage.getItem(\"refresh_token\"),\r\n        });\r\n        localStorage.setItem(\"access_token\", res.data.access);\r\n        token = res.data.access;\r\n      } catch (err) {\r\n        console.error(\"Refresh token failed\", err);\r\n        localStorage.clear();\r\n        window.location.href = \"/login\"; // Redirect to login\r\n      }\r\n    }\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n\r\n  return config;\r\n});\r\n// Fetch all consumers\r\nexport const fetchConsumers = () =>\r\n  API.get(\"/consumers/\", {\r\n    headers: { Authorization: `Bearer ${localStorage.getItem(\"access_token\")}` },\r\n  }).then((res) => res.data);\r\n\r\n// Fetch records (optionally filtered)  \r\nexport const fetchRecords = ({ consumerId, postcode, startDate, endDate } = {}) => {\r\n  const params = {};\r\n  if (consumerId && consumerId !== \"\" && consumerId !== \"all\") params.Customer   = consumerId;\r\n  if (postcode && postcode !== \"\" && postcode !== \"all\")    params.Postcode   = postcode;\r\n  if (startDate)   params.start_date = startDate;\r\n  if (endDate)     params.end_date   = endDate;\r\n\r\n  return API.get(\"/records/\", {\r\n    headers: { Authorization: `Bearer ${localStorage.getItem(\"access_token\")}` },\r\n    params,\r\n  }).then((res) => res.data);\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC9BC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EAC7C,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;;EAEhD;EACA,IAAIF,KAAK,EAAE;IACT,MAAM;MAAEG;IAAI,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,IAAIJ,GAAG,GAAG,IAAI,GAAGK,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAC3B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,qBAAqB,EAAE;UAClDC,OAAO,EAAEX,YAAY,CAACC,OAAO,CAAC,eAAe;QAC/C,CAAC,CAAC;QACFD,YAAY,CAACY,OAAO,CAAC,cAAc,EAAEH,GAAG,CAACI,IAAI,CAACC,MAAM,CAAC;QACrDf,KAAK,GAAGU,GAAG,CAACI,IAAI,CAACC,MAAM;MACzB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;QAC1Cf,YAAY,CAACkB,KAAK,CAAC,CAAC;QACpBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;MACnC;IACF;IACAvB,MAAM,CAACwB,OAAO,CAACC,aAAa,GAAG,UAAUxB,KAAK,EAAE;EAClD;EAEA,OAAOD,MAAM;AACf,CAAC,CAAC;AACF;AACA,OAAO,MAAM0B,cAAc,GAAGA,CAAA,KAC5BhC,GAAG,CAACiC,GAAG,CAAC,aAAa,EAAE;EACrBH,OAAO,EAAE;IAAEC,aAAa,EAAE,UAAUvB,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAAG;AAC7E,CAAC,CAAC,CAACyB,IAAI,CAAEjB,GAAG,IAAKA,GAAG,CAACI,IAAI,CAAC;;AAE5B;AACA,OAAO,MAAMc,YAAY,GAAGA,CAAC;EAAEC,UAAU;EAAEC,QAAQ;EAAEC,SAAS;EAAEC;AAAQ,CAAC,GAAG,CAAC,CAAC,KAAK;EACjF,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,IAAIJ,UAAU,IAAIA,UAAU,KAAK,EAAE,IAAIA,UAAU,KAAK,KAAK,EAAEI,MAAM,CAACC,QAAQ,GAAKL,UAAU;EAC3F,IAAIC,QAAQ,IAAIA,QAAQ,KAAK,EAAE,IAAIA,QAAQ,KAAK,KAAK,EAAKG,MAAM,CAACE,QAAQ,GAAKL,QAAQ;EACtF,IAAIC,SAAS,EAAIE,MAAM,CAACG,UAAU,GAAGL,SAAS;EAC9C,IAAIC,OAAO,EAAMC,MAAM,CAACI,QAAQ,GAAKL,OAAO;EAE5C,OAAOvC,GAAG,CAACiC,GAAG,CAAC,WAAW,EAAE;IAC1BH,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUvB,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAAG,CAAC;IAC5E+B;EACF,CAAC,CAAC,CAACN,IAAI,CAAEjB,GAAG,IAAKA,GAAG,CAACI,IAAI,CAAC;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}