{"ast":null,"code":"import { predictConsumption } from \"./api\";\nexport const handlePredictionLogic = async ({\n  records,\n  consumerId,\n  setNotification,\n  setPredictionData\n}) => {\n  // June 1–30, 2013\n  const startDate = new Date(\"2013-06-01T00:00:00Z\");\n  const endDate = new Date(\"2013-06-30T23:59:59Z\");\n\n  // filter on the actual `Customer` field and numeric match\n  const june2013Data = records.filter(record => {\n    const recordDate = new Date(record.date);\n    return Number(record.Customer) === Number(consumerId) && recordDate >= startDate && recordDate <= endDate;\n  });\n  if (june2013Data.length === 0) {\n    setNotification(\"No data available for June 2013 to predict.\");\n    return;\n  }\n  try {\n    const prediction = await predictConsumption(june2013Data);\n    setPredictionData(prediction);\n    setNotification(null);\n  } catch (error) {\n    setNotification(error.message);\n  }\n};","map":{"version":3,"names":["predictConsumption","handlePredictionLogic","records","consumerId","setNotification","setPredictionData","startDate","Date","endDate","june2013Data","filter","record","recordDate","date","Number","Customer","length","prediction","error","message"],"sources":["C:/Users/User/OneDrive/Documents/GitHub/AdEva-ausgrid/app/frontend/src/services/predictHelper.js"],"sourcesContent":["import { predictConsumption } from \"./api\";\r\n\r\nexport const handlePredictionLogic = async ({\r\n  records,\r\n  consumerId,\r\n  setNotification,\r\n  setPredictionData,\r\n}) => {\r\n  // June 1–30, 2013\r\n  const startDate = new Date(\"2013-06-01T00:00:00Z\");\r\n  const endDate   = new Date(\"2013-06-30T23:59:59Z\");\r\n\r\n  // filter on the actual `Customer` field and numeric match\r\n  const june2013Data = records.filter((record) => {\r\n    const recordDate = new Date(record.date);\r\n    return (\r\n      Number(record.Customer) === Number(consumerId) &&\r\n      recordDate >= startDate &&\r\n      recordDate <= endDate\r\n    );\r\n  });\r\n\r\n  if (june2013Data.length === 0) {\r\n    setNotification(\"No data available for June 2013 to predict.\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const prediction = await predictConsumption(june2013Data);\r\n    setPredictionData(prediction);\r\n    setNotification(null);\r\n  } catch (error) {\r\n    setNotification(error.message);\r\n  }\r\n};"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,OAAO;AAE1C,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAO;EAC1CC,OAAO;EACPC,UAAU;EACVC,eAAe;EACfC;AACF,CAAC,KAAK;EACJ;EACA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,sBAAsB,CAAC;EAClD,MAAMC,OAAO,GAAK,IAAID,IAAI,CAAC,sBAAsB,CAAC;;EAElD;EACA,MAAME,YAAY,GAAGP,OAAO,CAACQ,MAAM,CAAEC,MAAM,IAAK;IAC9C,MAAMC,UAAU,GAAG,IAAIL,IAAI,CAACI,MAAM,CAACE,IAAI,CAAC;IACxC,OACEC,MAAM,CAACH,MAAM,CAACI,QAAQ,CAAC,KAAKD,MAAM,CAACX,UAAU,CAAC,IAC9CS,UAAU,IAAIN,SAAS,IACvBM,UAAU,IAAIJ,OAAO;EAEzB,CAAC,CAAC;EAEF,IAAIC,YAAY,CAACO,MAAM,KAAK,CAAC,EAAE;IAC7BZ,eAAe,CAAC,6CAA6C,CAAC;IAC9D;EACF;EAEA,IAAI;IACF,MAAMa,UAAU,GAAG,MAAMjB,kBAAkB,CAACS,YAAY,CAAC;IACzDJ,iBAAiB,CAACY,UAAU,CAAC;IAC7Bb,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdd,eAAe,CAACc,KAAK,CAACC,OAAO,CAAC;EAChC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}