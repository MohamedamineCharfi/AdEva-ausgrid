{"ast":null,"code":"import { predictConsumption } from \"./api\";\nexport const handlePredictionLogic = async ({\n  records,\n  consumerId,\n  setNotification,\n  setPredictionData\n}) => {\n  const now = new Date();\n  const oneMonthAgo = new Date();\n  oneMonthAgo.setMonth(now.getMonth() - 1);\n  const lastMonthData = records.filter(record => {\n    const recordDate = new Date(record.date);\n    return record.ConsumerId === consumerId && recordDate >= oneMonthAgo && recordDate <= now;\n  });\n  if (lastMonthData.length === 0) {\n    setNotification(\"No data available for the last month to predict.\");\n    return;\n  }\n  try {\n    const prediction = await predictConsumption(lastMonthData);\n    setPredictionData(prediction);\n    setNotification(null);\n  } catch (error) {\n    setNotification(error.message);\n  }\n};","map":{"version":3,"names":["predictConsumption","handlePredictionLogic","records","consumerId","setNotification","setPredictionData","now","Date","oneMonthAgo","setMonth","getMonth","lastMonthData","filter","record","recordDate","date","ConsumerId","length","prediction","error","message"],"sources":["C:/Users/User/OneDrive/Documents/GitHub/AdEva-ausgrid/app/frontend/src/services/predictHelper.js"],"sourcesContent":["import { predictConsumption } from \"./api\";\r\n\r\nexport const handlePredictionLogic = async ({\r\n  records,\r\n  consumerId,\r\n  setNotification,\r\n  setPredictionData,\r\n}) => {\r\n  const now = new Date();\r\n  const oneMonthAgo = new Date();\r\n  oneMonthAgo.setMonth(now.getMonth() - 1);\r\n\r\n  const lastMonthData = records.filter((record) => {\r\n    const recordDate = new Date(record.date);\r\n    return (\r\n      record.ConsumerId === consumerId &&\r\n      recordDate >= oneMonthAgo &&\r\n      recordDate <= now\r\n    );\r\n  });\r\n\r\n  if (lastMonthData.length === 0) {\r\n    setNotification(\"No data available for the last month to predict.\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const prediction = await predictConsumption(lastMonthData);\r\n    setPredictionData(prediction);\r\n    setNotification(null);\r\n  } catch (error) {\r\n    setNotification(error.message);\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,OAAO;AAE1C,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAO;EAC1CC,OAAO;EACPC,UAAU;EACVC,eAAe;EACfC;AACF,CAAC,KAAK;EACJ,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,MAAMC,WAAW,GAAG,IAAID,IAAI,CAAC,CAAC;EAC9BC,WAAW,CAACC,QAAQ,CAACH,GAAG,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAExC,MAAMC,aAAa,GAAGT,OAAO,CAACU,MAAM,CAAEC,MAAM,IAAK;IAC/C,MAAMC,UAAU,GAAG,IAAIP,IAAI,CAACM,MAAM,CAACE,IAAI,CAAC;IACxC,OACEF,MAAM,CAACG,UAAU,KAAKb,UAAU,IAChCW,UAAU,IAAIN,WAAW,IACzBM,UAAU,IAAIR,GAAG;EAErB,CAAC,CAAC;EAEF,IAAIK,aAAa,CAACM,MAAM,KAAK,CAAC,EAAE;IAC9Bb,eAAe,CAAC,kDAAkD,CAAC;IACnE;EACF;EAEA,IAAI;IACF,MAAMc,UAAU,GAAG,MAAMlB,kBAAkB,CAACW,aAAa,CAAC;IAC1DN,iBAAiB,CAACa,UAAU,CAAC;IAC7Bd,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC,CAAC,OAAOe,KAAK,EAAE;IACdf,eAAe,CAACe,KAAK,CAACC,OAAO,CAAC;EAChC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}